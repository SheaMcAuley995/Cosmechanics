<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rewired_NintendoSwitch_EditorRuntime</name>
    </assembly>
    <members>
        <member name="F:Rewired.Platforms.Switch.SixAxisDevice._stateHistory">
            <summary>
            Stored oldest to newest because of reverse bug! Don't forget to flip when accessing.
            </summary>
        </member>
        <member name="T:Rewired.Utils.Platforms.Switch.Main">
            <exclude></exclude>
            A class to allow initialization of the system from outside without exposing anything in SwitchInput.
            This is just hidden away in the Utils namespace.
            Must be called to initialize and deinitialize the Switch platform system.
        </member>
        <member name="M:Rewired.Utils.Platforms.Switch.Main.Initialize(System.Object,Rewired.Utils.Interfaces.IKeyedData{System.Int32})">
            <exclude></exclude>
            <summary>
            Initializes the Nintendo Switch platform.
            This is for internal use only. Do not call this function.
            </summary>
            <param name="inputManager">Input manager</param>
            <param name="userData">User data</param>
            <returns>Input manager</returns>
        </member>
        <member name="M:Rewired.Utils.Platforms.Switch.Main.Deinitialize(System.Object)">
            <exclude></exclude>
            <summary>
            Deinitializes the Nintendo Switch platform.
            This is for internal use only. Do not call this function.
            </summary>
            <param name="inputManager">Input manager</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.Core.Initialize(System.Object,Rewired.Utils.Interfaces.IKeyedData{System.Int32})">
            <summary>
            Initializes the Nintendo Switch platform.
            This is called by Nintendo Switch Options
            This is for internal use only. Do not call this function.
            </summary>
            <param name="inputManager">Input manager</param>
            <param name="userData">Configuration settings</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.Core.Deinitialize(System.Object)">
            <summary>
            Deinitializes the Nintendo Switch platform.
            This is for internal use only. Do not call this function.
            </summary>
            <param name="inputManager">Input manager</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.Core.GetPlayerIdFromNpadId(Rewired.Platforms.Switch.NpadId)">
            <summary>
            Gets the Rewired Player Id from an Npad id.
            </summary>
            <param name="npadId">The Npad id.</param>
            <returns>Rewired Player Id. Returns -1 if no Player Id found.</returns>
        </member>
        <member name="T:Rewired.Platforms.Switch.DualJoyConExtension">
            <summary>
            Controller extension for two Joy-Cons used together as a single gamepad.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchGamepadExtension">
            <summary>
            Controller extension for a gamepad. This includes the Pro Controller, individual Joy-Cons, dual Joy-Cons, and the Handheld controller.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.ISwitchVibrationDevice">
            <summary>
            Interface for a device that supports vibration.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.GetVibration(System.Int32)">
            <summary>
            Gets the current vibration value from the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <returns>VibrationValue</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,System.Byte[])">
            <summary>
            Plays back a vibration file through the controller's vibration motor.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="vibrationFile">Vibration file in BNVIB format.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Plays back a vibration file through the controller's vibration motor.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="vibrationFile">Vibration file in BNVIB format.</param>
            <param name="stopOtherMotors">Stop other motors?</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="vibration">The vibration data.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration,System.Single)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="vibration">The vibration data.</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="vibration">The vibration data.</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration,System.Single,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="vibration">The vibration data.</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor.</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.StopVibration">
            <summary>
            Stops vibration and cancels vibration file playback in all motors.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchVibrationDevice.StopVibration(System.Int32)">
            <summary>
            Stops vibration and cancels vibration file playback in the specified motor.
            <param name="motorIndex">The index of the vibration motor.</param>
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ISwitchVibrationDevice.vibrationMotorCount">
            <summary>
            The number of vibration motors.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.ISwitchIMUDevice">
            <summary>
            Interface for a device with six-axis sensors.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetIMUStateCount(System.Int32)">
            <summary>
            Gets the number of six-axis sensor states received since the previous frame available for reading.
            If no new states were received since the last frame, the sensor state count will be 0.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Six-axis sensor state count</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetIMUState(System.Int32,System.Int32)">
            <summary>
            Gets the six-axis sensor state at a particular index from the queue of
            sensor states received since the previous frame.
            Check <see cref="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetIMUStateCount(System.Int32)"/> to determine how many sensor states are available.
            The queue is ordered newest to oldest with the state at index 0 being the most current.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="stateIndex">The index of the six-axis sensor state to retrieve.</param>
            <returns>Six-axis sensor state</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetOrientation">
            <summary>
            Gets the current orientation from the first available sensor.
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetOrientation(System.Int32)">
            <summary>
            Gets the current orientation.
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetOrientationRaw">
            <summary>
            Gets the current orientation from the first available sensor as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Raw orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetOrientationRaw(System.Int32)">
            <summary>
            Gets the current orientation as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Raw orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAcceleration">
            <summary>
            Gets the current acceleration vector from the first available sensor in units of G force.
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAcceleration(System.Int32)">
            <summary>
            Gets the current acceleration vector in units of G force.
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAccelerationRaw">
            <summary>
            Gets the current acceleration vector from the first available sensor in units of G force as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Raw acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAccelerationRaw(System.Int32)">
            <summary>
            Gets the current acceleration vector in units of G force as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Raw acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAngularVelocity">
            <summary>
            Gets the current angular velocity from the first available sensor. (1.0 = 360 dps)
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAngularVelocity(System.Int32)">
            <summary>
            Gets the current angular velocity. (1.0 = 360 dps)
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAngularVelocityRaw">
            <summary>
            Gets the current angular velocity from the first available sensor as reported by the sensor. (1.0 = 360 dps)
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Raw angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetAngularVelocityRaw(System.Int32)">
            <summary>
            Gets the current angular velocity as reported by the sensor. (1.0 = 360 dps)
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Raw angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetRotationAngle">
            <summary>
            Gets the current angle of rotation around each axis from the first available sensor.
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetRotationAngle(System.Int32)">
            <summary>
            Gets the current angle of rotation around each axis.
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetRotationAngleRaw(System.Int32)">
            <summary>
            Gets the current angle of rotation around each axis from the first available sensor as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetRotationAngleRaw">
            <summary>
            Gets the current angle of rotation around each axis as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.StopIMU">
            <summary>
            Stops sampling all sensors. No data will be returned when the sensor is stopped.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.StopIMU(System.Int32)">
            <summary>
            Stops sampling the sensor. No data will be returned when the sensor is stopped.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.StartIMU">
            <summary>
            Starts sampling in all sensors. Data will be returned when the sensor is started.
            SDK documentation states that calling this function will set the base attitude of the sensor.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.StartIMU(System.Int32)">
            <summary>
            Starts sampling the sensor. Data will be returned when the sensor is started.
            SDK documentation states that calling this function will set the base attitude of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.IsIMUAtRest">
            <summary>
            Determines whether all sensors are at rest or moving.
            If any sensor is moving, false will be returned.
            Refer to the Nintendo SDK documentation on nn::hid::IsIMUAtRest for important requirements.
            </summary>
            <returns>Resting state of the sensor</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.IsIMUAtRest(System.Int32)">
            <summary>
            Determines whether the sensor is at rest or moving.
            Refer to the Nintendo SDK documentation on nn::hid::IsIMUAtRest for important requirements.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Resting state of the sensor</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetIMUSensorFusionEnabled(System.Int32)">
            <summary>
            Gets the attitude correction state of the six-axis sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Attitude correction state of the six-axis sensor</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.SetIMUSensorFusionEnabled(System.Boolean)">
            <summary>
            Sets the attitude correction state of all six-axis sensors.
            </summary>
            <param name="enabled">The new enabled state.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.SetIMUSensorFusionEnabled(System.Int32,System.Boolean)">
            <summary>
            Sets the attitude correction state of the six-axis sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="enabled">The new enabled state.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetGyroscopeZeroDriftMode(System.Int32)">
            <summary>
            Gets the gyroscope zero point correction mode of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Gyroscope zero point correction mode</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.SetGyroscopeZeroDriftMode(Rewired.Platforms.Switch.GyroscopeZeroDriftMode)">
            <summary>
            Sets the gyroscope zero point correction mode of all sensors.
            </summary>
            <param name="mode">The zero point correction mode.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.SetGyroscopeZeroDriftMode(System.Int32,Rewired.Platforms.Switch.GyroscopeZeroDriftMode)">
            <summary>
            Sets the gyroscope zero point correction mode of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="mode">The zero point correction mode.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.GetIMUSensorFusionOptions(System.Int32)">
            <summary>
            Gets the sensor fusion options of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Sensor fusion settings</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.SetIMUSensorFusionOptions(Rewired.Platforms.Switch.SwitchIMUSensorFusionOptions)">
            <summary>
            Sets the sensor fusion options of all sensors.
            </summary>
            <param name="options">The sensor fusion options.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.SetIMUSensorFusionOptions(System.Int32,Rewired.Platforms.Switch.SwitchIMUSensorFusionOptions)">
            <summary>
            Sets the sensor fusion options of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="options">The sensor fusion options.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.ResetIMUSensorFusionOptions">
            <summary>
            Resets the sensor fusion options of all sensors to the default values.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ISwitchIMUDevice.ResetIMUSensorFusionOptions(System.Int32)">
            <summary>
            Resets the sensor fusion options of the sensor to the default values.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
        </member>
        <member name="P:Rewired.Platforms.Switch.ISwitchIMUDevice.imuCount">
            <summary>
            The number of six-axis sensors in the device.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.#ctor(Rewired.Platforms.Switch.SwitchGamepadExtension)">
            <summary>
            For cloning.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.Disconnect">
            <summary>
            Disconnects the controller.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsConnected">
            <summary>
            Is the controller present?
            </summary>
            <returns>The connection status.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsConnected(System.Int32)">
            <summary>
            Is the sub-device present?
            </summary>
            <param name="subDeviceIndex">The index of the sub device. This is used for compound devices such as Dual Joy-Con Gamepad. Check subDeviceCount to determine the number of sub devices in this device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">subDeviceIndex is out of range.</exception>
            <returns>The connection status.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsWired">
            <summary>
            Is the controller connected by wire?
            </summary>
            <returns>The wired status.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsWired(System.Int32)">
            <summary>
            Is the sub-device connected by wire?
            </summary>
            <param name="subDeviceIndex">The index of the sub device. This is used for compound devices such as Dual Joy-Con Gamepad. Check subDeviceCount to determine the number of sub devices in this device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">subDeviceIndex is out of range.</exception>
            <returns>The wired status.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetPlayerLightPattern">
            <summary>
            Gets a bitmask representing the player lights on the controller.
            </summary>
            <returns>Player light pattern</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetJoyConAssignmentMode">
            <summary>
            Gets the current Joy-Con assignment mode.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetJoyConAssignmentMode(Rewired.Platforms.Switch.JoyConAssignmentMode)">
            <summary>
            Changes the Joy-Con assignment mode.
            If called on a Single Joy-Con, it will be set to Dual mode and then next attached Joy-Con will be paired with it.
            If called on a Dual Joy-Con, the left Joy-Con will remain connected to the same npadId while the right will be reassigned by the system.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsColorAvailable">
            <summary>
            Is controller color available from this controller?
            </summary>
            <returns>True if the device provides color information, false if not.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsColorAvailable(System.Int32)">
            <summary>
            Is controller color available from this sub-device?
            </summary>
            <param name="subDeviceIndex">The index of the sub device. This is used for compound devices such as Dual Joy-Con Gamepad. Check subDeviceCount to determine the number of sub devices in this device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">subDeviceIndex is out of range.</exception>
            <returns>True if the device provides color information, false if not.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetMainColor">
            <summary>
            Gets the main color from the controller.
            You should check if color information is available first by checking the value of isColorAvailable.
            </summary>
            <returns>Controller main color.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetMainColor(System.Int32)">
            <summary>
            Gets the main color from the sub-device.
            You should check if color information is available first by checking the value of isColorAvailable.
            </summary>
            <param name="subDeviceIndex">The index of the sub device. This is used for compound devices such as Dual Joy-Con Gamepad. Check subDeviceCount to determine the number of sub devices in this device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">subDeviceIndex is out of range.</exception>
            <returns>Controller main color.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetSubColor">
            <summary>
            Gets the sub color from the controller.
            You should check if color information is available first by checking the value of isColorAvailable.
            </summary>
            <returns>Controller sub color.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetSubColor(System.Int32)">
            <summary>
            Gets the sub color from the sub-device.
            You should check if color information is available first by checking the value of isColorAvailable.
            </summary>
            <param name="subDeviceIndex">The index of the sub device. This is used for compound devices such as Dual Joy-Con Gamepad. Check subDeviceCount to determine the number of sub devices in this device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">subDeviceIndex is out of range.</exception>
            <returns>Controller sub color.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetVibration(System.Int32)">
            <summary>
            Gets the current vibration value from the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <returns>VibrationValue</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="amplitudeLow">The low band amplitude (using a unit where the maximum is 1.0f)</param>
            <param name="frequencyLow">The low band frequency (using Hz units)</param>
            <param name="amplitudeHigh">The high band amplitude (using a unit where the maximum is 1.0f</param>
            <param name="frequencyHigh">The high band frequency (using Hz units)</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="vibration">The vibration data.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration,System.Single)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="vibration">The vibration data.</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration,System.Single,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="vibration">The vibration data.</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,Rewired.Platforms.Switch.SwitchVibration,System.Boolean)">
            <summary>
            Sets vibration in the controller.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="vibration">The vibration data.</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,System.Byte[])">
            <summary>
            Plays back a vibration file through the controller's vibration motor.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="vibrationFile">Vibration file in BNVIB format.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetVibration(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Plays back a vibration file through the controller's vibration motor.
            </summary>
            <param name="motorIndex">The index of the vibration motor</param>
            <param name="vibrationFile">Vibration file in BNVIB format.</param>
            <param name="stopOtherMotors">Stop other motors?</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.StopVibration(System.Int32)">
            <summary>
            Stops vibration and cancels vibration file playback in the specified vibration motor.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.StopVibration">
            <summary>
            Stops vibration and cancels vibration file playback in all vibration motors.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.Rewired#Interfaces#IControllerVibrator#SetVibration(System.Int32,System.Single)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.Rewired#Interfaces#IControllerVibrator#SetVibration(System.Int32,System.Single,System.Single)">
            <summary>
            Sets vibration level for a motor at a specified index with a timeout.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.Rewired#Interfaces#IControllerVibrator#SetVibration(System.Int32,System.Single,System.Boolean)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.Rewired#Interfaces#IControllerVibrator#SetVibration(System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets vibration level for a motor at a specified index with a timeout.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="duration">Length of time in seconds to activate the motor before it stops. [0 = Infinite]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.Rewired#Interfaces#IControllerVibrator#GetVibration(System.Int32)">
            <summary>
            Gets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <returns>Motor level [float: 0.0 - 1.0]</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetIMUStateCount(System.Int32)">
            <summary>
            The number of six-axis sensor states received since the previous frame available for reading.
            If no new states were received since the last frame, the sensor state count will be 0.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Six-axis sensor state count</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetIMUState(System.Int32,System.Int32)">
            <summary>
            Gets the six-axis sensor state at a particular index from the queue of
            sensor states received since the previous frame.
            Check <see cref="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetIMUStateCount(System.Int32)"/> to determine how many sensor states are available.
            The queue is ordered newest to oldest with the state at index 0 being the most current.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="stateIndex">The index of the six-axis sensor state to retrieve.</param>
            <exception cref="T:System.IndexOutOfRangeException">stateIndex is out of range.</exception>
            <returns>Six-axis sensor state</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetOrientation">
            <summary>
            Gets the current orientation from the first available sensor.
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetOrientation(System.Int32)">
            <summary>
            Gets the current orientation.
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetOrientationRaw">
            <summary>
            Gets the current orientation from the first available sensor as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Raw orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetOrientationRaw(System.Int32)">
            <summary>
            Gets the current orientation as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Raw orientation</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAcceleration">
            <summary>
            Gets the current acceleration vector in units of G force.
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAcceleration(System.Int32)">
            <summary>
            Gets the current acceleration vector in units of G force.
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAccelerationRaw">
            <summary>
            Gets the current acceleration vector from the first available sensor in units of G force as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Raw acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAccelerationRaw(System.Int32)">
            <summary>
            Gets the current acceleration vector in units of G force as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Raw acceleration vector</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAngularVelocity">
            <summary>
            Gets the current angular velocity from the first available sensor. (1.0 = 360 dps)
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAngularVelocity(System.Int32)">
            <summary>
            Gets the current angular velocity. (1.0 = 360 dps)
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAngularVelocityRaw">
            <summary>
            Gets the current angular  from the first available sensor as reported by the sensor. (1.0 = 360 dps)
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Raw angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetAngularVelocityRaw(System.Int32)">
            <summary>
            Gets the current angular velocity as reported by the sensor. (1.0 = 360 dps)
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Raw angular velocity</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetRotationAngle">
            <summary>
            Gets the current angle of rotation around each axis from the first available sensor.
            The value has been converted to Unity's coordinate system.
            </summary>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetRotationAngle(System.Int32)">
            <summary>
            Gets the current angle of rotation around each axis.
            The value has been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetRotationAngleRaw">
            <summary>
            Gets the current angle of rotation around each axis from the first available sensor as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetRotationAngleRaw(System.Int32)">
            <summary>
            Gets the current angle of rotation around each axis as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.StopIMU">
            <summary>
            Stops sampling all sensors. No data will be returned when the sensor is stopped.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.StopIMU(System.Int32)">
            <summary>
            Stops sampling the sensor. No data will be returned when the sensor is stopped.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.StartIMU">
            <summary>
            Starts sampling in all sensors. Data will be returned when the sensor is started.
            SDK documentation states that calling this function will set the base attitude of the sensor.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.StartIMU(System.Int32)">
            <summary>
            Starts sampling the sensor. Data will be returned when the sensor is started.
            SDK documentation states that calling this function will set the base attitude of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsIMUAtRest">
            <summary>
            Determines whether all sensors are at rest or moving.
            If any sensor is moving, false will be returned.
            Refer to the Nintendo SDK documentation on nn::hid::IsIMUAtRest for important requirements.
            </summary>
            <returns>Resting state of the sensor</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.IsIMUAtRest(System.Int32)">
            <summary>
            Determines whether the sensor is at rest or moving.
            Refer to the Nintendo SDK documentation on nn::hid::IsIMUAtRest for important requirements.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Resting state of the sensor</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetIMUSensorFusionEnabled(System.Int32)">
            <summary>
            Gets the attitude correction state of the six-axis sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Attitude correction state of the six-axis sensor</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetIMUSensorFusionEnabled(System.Boolean)">
            <summary>
            Sets the attitude correction state of all six-axis sensors.
            </summary>
            <param name="enabled">The new enabled state.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetIMUSensorFusionEnabled(System.Int32,System.Boolean)">
            <summary>
            Sets the attitude correction state of the six-axis sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="enabled">The new enabled state.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetGyroscopeZeroDriftMode(System.Int32)">
            <summary>
            Gets the gyroscope zero point correction mode of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Gyroscope zero point correction mode</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetGyroscopeZeroDriftMode(Rewired.Platforms.Switch.GyroscopeZeroDriftMode)">
            <summary>
            Sets the gyroscope zero point correction mode of all sensors.
            </summary>
            <param name="mode">The zero point correction mode.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetGyroscopeZeroDriftMode(System.Int32,Rewired.Platforms.Switch.GyroscopeZeroDriftMode)">
            <summary>
            Sets the gyroscope zero point correction mode of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="mode">The zero point correction mode.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.GetIMUSensorFusionOptions(System.Int32)">
            <summary>
            Gets the sensor fusion options of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <returns>Sensor fusion settings</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetIMUSensorFusionOptions(Rewired.Platforms.Switch.SwitchIMUSensorFusionOptions)">
            <summary>
            Sets the sensor fusion options of all sensors.
            </summary>
            <param name="options">The sensor fusion options.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.SetIMUSensorFusionOptions(System.Int32,Rewired.Platforms.Switch.SwitchIMUSensorFusionOptions)">
            <summary>
            Sets the sensor fusion options of the sensor.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
            <param name="options">The sensor fusion options.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.ResetIMUSensorFusionOptions">
            <summary>
            Resets the sensor fusion options of all sensors to the default values.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchGamepadExtension.ResetIMUSensorFusionOptions(System.Int32)">
            <summary>
            Resets the sensor fusion options of the sensor to the default values.
            </summary>
            <param name="sensorIndex">The index of the six-axis sensor.</param>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchGamepadExtension.subDeviceCount">
            <summary>
            Gets the number of sub devices that makes up this device.
            This is used for compound devices such as Dual Joy-Con Gamepad.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchGamepadExtension.switchControllerType">
            <summary>
            The type of controller.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchGamepadExtension.npadId">
            <summary>
            Gets the Npad Id of the controller.
            This is useful if you need to interact directly with the Nintendo SDK.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchGamepadExtension.npadStyle">
            <summary>
            Gets the Npad Style of the controller.
            This is useful if you need to interact directly with the Nintendo SDK.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchGamepadExtension.vibrationMotorCount">
            <summary>
            The number of vibration motors.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchGamepadExtension.imuCount">
            <summary>
            The number of six-axis sensors in the controller.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.DualJoyConExtension.subDeviceIndex_leftJoyCon">
            <summary>
            Sub device index for the Left Joy-Con.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.DualJoyConExtension.subDeviceIndex_rightJoyCon">
            <summary>
            Sub device index for the Right Joy-Con.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.DualJoyConExtension.#ctor(Rewired.Platforms.Switch.DualJoyConExtension)">
            <summary>
            Use for cloning.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.DualJoyConExtension.IsLeftJoyConConnected">
            <summary>
            Is the left Joy-Con present?
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.DualJoyConExtension.IsRightJoyConConnected">
            <summary>
            Is the right Joy-Con present?
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.DualJoyConExtension.IsLeftJoyConWired">
            <summary>
            Is the left Joy-Con connected by wire?
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.DualJoyConExtension.IsRightJoyConWired">
            <summary>
            Is the right Joy-Con connected by wire?
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.DualJoyConExtension.SetJoyConAssignmentModeToSingle(Rewired.Platforms.Switch.JoyConType)">
            <summary>
            Sets the Joy-Con assignment mode to single.
            </summary>
            <param name="joyConToKeepConnected">Which of the two Joy-Cons should remain connected and assigned to the same npadId?</param>
        </member>
        <member name="T:Rewired.Platforms.Switch.HandheldExtension">
            <summary>
            Controller extension for Handheld mode (the Switch console with Joy-Cons attached).
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.HandheldExtension.subDeviceIndex_leftJoyCon">
            <summary>
            Sub device index for the Left Joy-Con.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.HandheldExtension.subDeviceIndex_rightJoyCon">
            <summary>
            Sub device index for the Right Joy-Con.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.HandheldExtension.#ctor(Rewired.Platforms.Switch.HandheldExtension)">
            <summary>
            Use for cloning.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.HandheldExtension.IsLeftJoyConConnected">
            <summary>
            Is the left Joy-Con present?
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.HandheldExtension.IsRightJoyConConnected">
            <summary>
            Is the right Joy-Con present?
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.HandheldExtension.IsLeftJoyConWired">
            <summary>
            Is the left Joy-Con connected by wire?
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.HandheldExtension.IsRightJoyConWired">
            <summary>
            Is the right Joy-Con connected by wire?
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.HandheldExtension.activationMode">
            <summary>
            Gets or sets the mode that activates the handheld style of operation.
            There are two different conditional modes for activating the handheld style of operation.
            <see cref="F:Rewired.Platforms.Switch.HandheldActivationMode.Dual">HandheldActivationMode.Dual</see>: 
            In this mode, the handheld style of operation is enabled when both the left and right Joy-Con controllers are attached. 
            This mode is set by default.
            <see cref="F:Rewired.Platforms.Switch.HandheldActivationMode.Single">HandheldActivationMode.Single</see>: 
            In this mode, the handheld style of operation is enabled when either just the left or right Joy-Con controller is attached.
            When just one of the two controllers is attached to Switch, the input from the unattached controller is treated as no input (as if no digital buttons are being pressed and the analog stick is in the neutral position). The input state of the six-axis sensor is obtained from the actually attached Joy-Con.
            The input from the unattached controller is treated as no input (as if no digital buttons are being pressed and the analog stick is in the neutral position).
            The input state of the six-axis sensor is obtained from the actually attached Joy-Con.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.JoyConExtension">
            <summary>
            Controller extension for an individual Joy-Con.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.JoyConExtension.#ctor(Rewired.Platforms.Switch.JoyConExtension)">
            <summary>
            For cloning.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.JoyConExtension.MergeJoyCons(Rewired.Platforms.Switch.JoyConExtension)">
            <summary>
            Merges two Single Joy-Cons into one Dual Joy-Con.
            You must pass in a left or a right Joy-Con of <see cref="T:Rewired.Platforms.Switch.JoyConType">JoyConType</see> depending on the
            JoyConType of this Joy-Con. Check the JoyConType with the <see cref="P:Rewired.Platforms.Switch.JoyConExtension.joyConType">joyConType</see> property.
            </summary>
            <param name="joyCon">Single Joy-Con to merge with this Joy-Con.</param>
            <returns>Success / failure</returns>
        </member>
        <member name="P:Rewired.Platforms.Switch.JoyConExtension.joyConType">
            <summary>
            The type of Joy-Con. This can be used to identify the Left or Right Joy-Con.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.JoyConExtension.joyConGripStyle">
            <summary>
            Gets or sets the current grip style of all single Joy-Cons.
            NOTE: This property gets or sets the grip style for all Joy-Cons.
            It is not possible to get or set the grip style on an individual Joy-Con.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.Config.IDebugPadSettings">
            <summary>
            Interface for DebugPadSettings used by Nintendo Switch Input Manager.
            This interface is only used for changing configuration in the editor.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.DebugPadSettings">
            <summary>
            Settings for the Debug Pad.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.DebugPadSettings.#ctor(Rewired.Utils.Interfaces.IKeyedData{System.Int32})">
            <exclude></exclude>
        </member>
        <member name="P:Rewired.Platforms.Switch.DebugPadSettings.enabled">
            <summary>
            Determines whether the Debug Pad will be enabled.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.DebugPadSettings.rewiredPlayerId">
            <summary>
            The Rewired Player Id to which the Debug Pad will be assigned.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.NpadStyle">
            <summary>
            Styles of Npad controllers in the Nintendo SDK.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadStyle.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadStyle.FullKey">
            <summary>
            Npad type that represents full key operation mode. (Pro Controller)
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadStyle.Handheld">
            <summary>
            Npad type that represents handheld operation. (Joy-Cons attached to the Switch unit.)
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadStyle.JoyConDual">
            <summary>
            The Npad type representing Joy-Con dual-controller grip operations.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadStyle.JoyConLeft">
            <summary>
            The Npad type representing Joy-Con (L) operations.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadStyle.JoyConRight">
            <summary>
            The Npad type representing Joy-Con (R) operations.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadStyle.Invalid">
            <summary>
            Invalid style.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.NpadId">
            <summary>
            Ids of Npad controllers in the Nintendo SDK.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No1">
            <summary>
            Id 1.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No2">
            <summary>
            Id 2.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No3">
            <summary>
            Id 3.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No4">
            <summary>
            Id 4.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No5">
            <summary>
            Id 5.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No6">
            <summary>
            Id 6.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No7">
            <summary>
            Id 7.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.No8">
            <summary>
            Id 8.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.Handheld">
            <summary>
            Id of Handheld mode.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.NpadId.Invalid">
            <summary>
            Invalid npad id.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchControllerType">
            <summary>
            Types of Switch controllers.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchControllerType.Unknown">
            <summary>
            An unknown controller type.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchControllerType.Gamepad">
            <summary>
            A dual-stick gamepad.
            Applies to dual Joy-Cons attached to gamepad grip, dual Joy-Cons attached to Switch unit (Handheld), and Pro Controller.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchControllerType.MiniGamepad">
            <summary>
            A single-stick gamepad.
            Applies to individual Joy-Cons.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.JoyConGripStyle">
            <summary>
            Grip styles of Joy-Cons.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.JoyConGripStyle.Vertical">
            <summary>
            Joy-Con held like a remote control using one hand with L/R and ZL/ZR facing forward/up.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.JoyConGripStyle.Horizontal">
            <summary>
            Joy-Con held like a gamepad with SL and SR facing forward/up.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.JoyConAssignmentMode">
            <summary>
            Assignment modes of a Joy-Con.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.JoyConAssignmentMode.Dual">
            <summary>
            Joy-Con pairs are handled as a single controller.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.JoyConAssignmentMode.Single">
            <summary>
            Joy-Cons are handled as individual controllers.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.HandheldActivationMode">
            <summary>
            Activation modes of the Handheld controller type.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.HandheldActivationMode.Dual">
            <summary>
            Handheld mode is activated when both Joy-Cons are attached.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.HandheldActivationMode.Single">
            <summary>
            Handheld mode is activated when one Joy-Con is attached.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.GyroscopeZeroDriftMode">
            <summary>
            Zero point correction modes for gyroscope sensors.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GyroscopeZeroDriftMode.Loose">
            <summary>
            Loose mode.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GyroscopeZeroDriftMode.Standard">
            <summary>
            Standard mode.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GyroscopeZeroDriftMode.Tight">
            <summary>
            Tight mode.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchIMUAttribute">
            <summary>
            Attributes of a six-axis sensor.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchIMUAttribute.IsConnected">
            <summary>
            The sensor is connected.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchIMUAttribute.IsInterpolated">
            <summary>
            The sensor is interpolated.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.JoyConType">
            <summary>
            Types of Joy-Cons.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.JoyConType.Left">
            <summary>
            The left Joy-Con.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.JoyConType.Right">
            <summary>
            The right Joy-Con.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.GamepadPlayerLight">
            <summary>
            Player lights on controllers.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GamepadPlayerLight.None">
            <summary>
            No lights are lit.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GamepadPlayerLight.Light1">
            <summary>
            The first light is lit.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GamepadPlayerLight.Light2">
            <summary>
            The second light is lit.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GamepadPlayerLight.Light3">
            <summary>
            The third light is lit.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.GamepadPlayerLight.Light4">
            <summary>
            The fourth light is lit.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.Config.JoyConAssignmentModeOption">
            <summary>
            Assignment modes of a Joy-Con.
            This enum is only for setting the starting option in the Nintendo Switch Input Manager.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.Config.JoyConAssignmentModeOption.Unmodified">
            <summary>
            Joy-Con assignment mode will be left at the current system setting.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.Config.JoyConAssignmentModeOption.Dual">
            <summary>
            Joy-Con pairs are handled as a single controller.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.Config.JoyConAssignmentModeOption.Single">
            <summary>
            Joy-Cons are handled as individual controllers.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.Config.INpadSettings">
            <summary>
            Interface for NpadSettings used by Nintendo Switch Input Manager.
            This interface is only used for changing configuration in the editor.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.Config.INpadSettings.isAllowed">
            <summary>
            Is the NpadId allowed to be used?
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.Config.INpadSettings.rewiredPlayerId">
            <summary>
            The Rewired Player id to which this NpadId will be associated.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.NpadSettings">
            <summary>
            Settings for an Npad.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.NpadSettings.#ctor(Rewired.Platforms.Switch.NpadId,Rewired.Utils.Interfaces.IKeyedData{System.Int32})">
            <exclude></exclude>
        </member>
        <member name="P:Rewired.Platforms.Switch.NpadSettings.isAllowed">
            <summary>
            Determines whether this Npad id is allowed to be used by the system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.NpadSettings.rewiredPlayerId">
            <summary>
            The Rewired Player Id assigned to this Npad id.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.NpadSettings.joyConAssignmentMode">
            <summary>
            Determines how Joy-Cons should be handled.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.NpadSettings.Rewired#Platforms#Switch#Config#INpadSettings#joyConAssignmentMode">
            <summary>
            Determines how Joy-Cons should be handled.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchIMUSensorFusionOptions">
            <summary>
            Parameters for six-axis sensor fusion.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchIMUSensorFusionOptions.power">
            <summary>
            Weight of acceleration correction. The greater the value, the more strongly correction is applied.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchIMUSensorFusionOptions.range">
            <summary>
            Valid range for acceleration correction.
            Correction calculations use the accelerometer values in this range, which is centered around gravitational acceleration (1.0f).
            For example, if 0.4f is specified, accelerometer values in the range from 0.6f to 1.4f are used in the correction calculation.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchIMUState">
            <summary>
            Represents a snapshot of the six-axis sensor state.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.deltaTime">
            <summary>
            The time elapsed between the previous sensor sampling and the current.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.samplingNumber">
            <summary>
            A counter that increases each time the sensor is sampled.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.attributes">
            <summary>
            Attributes of the sensor state.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.orientation">
            <summary>
            The orientation of the sensor.
            The value has been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.orientationRaw">
            <summary>
            The orientation as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.acceleration">
            <summary>
            The acceleration vector in units of G force.
            The value has been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.accelerationRaw">
            <summary>
            The acceleration vector in units of G force as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.angularVelocity">
            <summary>
            The angular velocity. (1.0 = 360 dps)
            The value has been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.angularVelocityRaw">
            <summary>
            The angular velocity as reported by the sensor. (1.0 = 360 dps)
            The value has not been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.rotationAngle">
            <summary>
            The angle of rotation around each axis.
            The value has been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchIMUState.rotationAngleRaw">
            <summary>
            The angle of rotation around each axis as reported by the sensor.
            The value has not been converted to Unity's coordinate system.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchInput">
            <summary>
            Provides access to input-related methods and settings at runtime.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.pluginVersion">
            <summary>
            Gets the current Rewired Nintendo Switch plugin version.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.isReady">
            <summary>
            Is the system initialized?
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchInput.Config">
            <summary>
            Provides runtime access to Rewired Switch input settings.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Config.GetNpadSettings(Rewired.Platforms.Switch.NpadId)">
            <summary>
            Gets the settings for a specific Npad id.
            </summary>
            <param name="npadId">The Npad id.</param>
            <returns>Npad Settings</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Config.GetDebugPadSettings">
            <summary>
            Gets the settings for the Debug Pad.
            </summary>
            <returns>Debug Pad Settings</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Config.VibrationThreadFailed">
            <summary>
            Called only when setting up the vibration thread fails
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Config.allowedNpadStyles">
            <summary>
            Determines which Npad styles are supported.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Config.joyConGripStyle">
            <summary>
            Determines how the user should hold individual Joy-Cons.
            Vertical: Joy-Con held like a remote control using one hand with L/R and ZL/ZR facing forward/up.
            Horizontal: Joy-Con held like a gamepad with SL and SR facing forward/up.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Config.adjustIMUsForGripStyle">
            <summary>
            If enabled, returned values from six-axis sensors
            will be modified to reflect the Joy-Con grip style for single Joy-Cons.
            When using a horizontal grip style, +Z points out from the SL/SR buttons.
            When using a vertical grip style, +Z points out from the L/ZL/R/ZR buttons.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Config.handheldActivationMode">
            <summary>
            Determines how many Joy-Cons must be attached for the Handheld mode to become active.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Config.assignJoysticksByNpadId">
            <summary>
            If enabled, Joysticks will be assigned to Players based on the npad id of the controller.
            Otherwise, the standard Rewired Joystick auto-assignment system will be used.
            Enable this to keep the Switch npad id aligned to the Rewired Player id when Joysticks are assigned.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Config.useVibrationThread">
            <summary>
            If enabled, controller vibration will updated updated on a separate thread.
            Otherwise, controller vibration will be updated on the main thread.
            Note: Changing this setting at runtime will cause Rewired to completely reset.
            See ReInput.Reset for important notes about resetting Rewired.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchInput.ControllerApplet">
            <summary>
            Provides access to the Nintendo Switch controller applet.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.ControllerApplet.Show(Rewired.Platforms.Switch.ControllerAppletOptions)">
            <summary>
            Shows the controller applet.
            Note: This function does not call UnityEngine.Switch.Applet.Begin().
            You must call that before calling this function if you want
            Unity to stop other threads it manages when the applet opens and call
            UnityEngine.Switch.Applet.End() after this function call.
            </summary>
            <param name="args">Arguments</param>
            <returns>Sucess / Fail</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.ControllerApplet.Show(Rewired.Platforms.Switch.ControllerAppletOptions,Rewired.Platforms.Switch.ControllerAppletResult@)">
            <summary>
            Shows the controller applet and gets a result.
            Note: This function does not call UnityEngine.Switch.Applet.Begin().
            You must call that before calling this function if you want
            Unity to stop other threads it manages when the applet opens and call
            UnityEngine.Switch.Applet.End() after this function call.
            </summary>
            <param name="args">The arguments</param>
            <param name="result">The result</param>
            <returns>Sucess / Fail</returns>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchInput.Npad">
            <summary>
            Provides access to Npad methods in the Nintendo SDK.
            Also allows setting Rewired Npad configuration settings at runtime.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetNpad(Rewired.Platforms.Switch.NpadId)">
            <summary>
            Gets the Npad with the specified npadId.
            </summary>
            <param name="npadId">The npadId.</param>
            <returns>Npad</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetSupportedStyleSet(Rewired.Platforms.Switch.NpadStyle)">
            <summary>
            Sets the operation mode to enable on the Npad. 
            The Npad supports multiple operation modes.
            Before the application can begin using the Npad, use this function to enable the operating status to be used by the application.
            Multiple operation modes can be enabled at the same time. Use the <see cref="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetSupportedStyleSet">GetNpadStyleSet()</see> to get the currently enabled Npad operation modes.
            </summary>
            <param name="npadStyle">An Npad operation mode to enable.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetSupportedStyleSet">
            <summary>
            Gets the currently enabled Npad operation modes.
            </summary>
            <returns>Returns the currently enabled Npad operation modes.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetSupportedIds(Rewired.Platforms.Switch.NpadId[])">
            <summary>
            Enables the specified Npad.
            Enables the Npad used by the application. You must call this API when starting to use the Npad.
            Specify the Npad to enable using <see cref="T:Rewired.Platforms.Switch.NpadId">NpadId</see>.
            You can specify multiple instances of <see cref="T:Rewired.Platforms.Switch.NpadId">NpadId</see> at the same time.
            Specify all Npads used by the application at the same time. The Npad used during the application can be updated.
            All Npads not specified with an <see cref="T:Rewired.Platforms.Switch.NpadId">NpadId</see> by this function are disabled.
            You cannot set a wireless controller as the controller to use, for example, when that Npad was not enabled with this function.
            When an enabled Npad becomes disabled, any controllers that were connected to that Npad are disconnected.
            </summary>
            <param name="npadIds">List of Npad IDs to enable.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetJoyConGripStyle(Rewired.Platforms.Switch.JoyConGripStyle)">
            <summary>
            Sets how the Joy-Con is held. 
            By setting how the Joy-Con controllers are held, you can operate the system features according to the style of operation specified in the application.
            The setting for how to hold the Joy-Con is enabled for those Joy-Con for which the assignment mode is <see cref="F:Rewired.Platforms.Switch.JoyConAssignmentMode.Single">JoyConAssignmentMode.Single</see>.
            The setting for how to hold the Joy-Con is shared by all Npads and cannot be configured individually. 
            The default setting is <see cref="F:Rewired.Platforms.Switch.JoyConGripStyle.Vertical">JoyConGripStyle.Vertical</see>.
            </summary>
            <param name="gripStyle">The style used to hold the Joy-Con.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetJoyConGripStyle">
            <summary>
            Gets how the Joy-Con is to be held.
            Gets the configured way of holding the Joy-Con.
            The method for operating the system features is determined by the way the Joy-Con is held.
            </summary>
            <returns>Returns the configured way of holding the Joy-Con.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.StartJoyConLRAssignmentMode">
            <summary>
            Starts the operation style mode assigned by pressing the L/R Buttons on the Joy-Con.
            When this function is called, both <see cref="T:Rewired.Platforms.Switch.NpadStyle">NpadStyle</see> and <see cref="T:Rewired.Platforms.Switch.JoyConAssignmentMode">JoyConAssignmentMode</see> are determined based on how the buttons are pressed on the Joy-Con. Enabled until <see cref="M:Rewired.Platforms.Switch.SwitchInput.Npad.StopJoyConLRAssignmentMode">StopLRAssignmentMode()</see> is called.
            If the L Button on the Joy-Con (L) and the R Button on the Joy-Con (R) are pressed simultaneously, the two Joy-Con are assigned to the Npad as a pair. If the Npad is already set to dual mode, nothing changes when the L/R Buttons are pressed.
            If either <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConRight">NpadStyle.JoyConRight</see> or <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConLeft">NpadStyle.JoyConLeft</see> is enabled and <see cref="T:Rewired.Platforms.Switch.JoyConGripStyle">JoyConGripStyle</see> is <see cref="F:Rewired.Platforms.Switch.JoyConGripStyle.Horizontal">JoyConGripStyle.Horizontal</see>,
            pressing the SL and SR Buttons simultaneously sets<see cref="T:Rewired.Platforms.Switch.NpadStyle">NpadStyle</see> to either <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConRight">NpadStyle.JoyConRight</see> or <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConLeft">NpadStyle.JoyConLeft</see>.
            The assignment for the relevant Npad changes to <see cref="F:Rewired.Platforms.Switch.JoyConAssignmentMode.Single">JoyConAssignmentMode.Single</see>. Pressing the SL or SR Button on either Joy-Con of the pair disconnects the other Joy-Con of the pair.
            If either <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConRight">NpadStyle.JoyConRight</see> or <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConLeft">NpadStyle.JoyConLeft</see> is enabled and <see cref="T:Rewired.Platforms.Switch.JoyConGripStyle">JoyConGripStyle</see> <see cref="F:Rewired.Platforms.Switch.JoyConGripStyle.Vertical">JoyConGripStyle.Vertical</see>,
            the Joy-Con is connected preferentially as either <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConRight">NpadStyle.JoyConRight</see> or <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConLeft">NpadStyle.JoyConLeft</see> and the assignment changes to <see cref="F:Rewired.Platforms.Switch.JoyConAssignmentMode.Single">JoyConAssignmentMode.Single</see>.
            There is no effect on operations when StartLrAssignmentMode has already been called.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.StopJoyConLRAssignmentMode">
            <summary>
            Ends the operation style mode that was assigned by pressing the L/R Buttons on the Joy-Con.
            Ends the operation style assigned mode based on the L and R Button presses that began using StartLRAssignmentMode().
            This function has no effect on operations if <see cref="M:Rewired.Platforms.Switch.SwitchInput.Npad.StartJoyConLRAssignmentMode">StartLRAssignmentMode()</see> was not called.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetHandheldActivationMode(Rewired.Platforms.Switch.HandheldActivationMode)">
            <summary>
            Sets the mode that activates the handheld style of operation.
            There are two different conditional modes for activating the handheld style of operation.
            <see cref="F:Rewired.Platforms.Switch.HandheldActivationMode.Dual">HandheldActivationMode.Dual</see>: 
            In this mode, the handheld style of operation is enabled when both the left and right Joy-Con controllers are attached. 
            This mode is set by default.
            <see cref="F:Rewired.Platforms.Switch.HandheldActivationMode.Single">HandheldActivationMode.Single</see>: 
            In this mode, the handheld style of operation is enabled when either just the left or right Joy-Con controller is attached.
            When just one of the two controllers is attached to Switch, the input from the unattached controller is treated as no input (as if no digital buttons are being pressed and the analog stick is in the neutral position). The input state of the six-axis sensor is obtained from the actually attached Joy-Con.
            The input from the unattached controller is treated as no input (as if no digital buttons are being pressed and the analog stick is in the neutral position).
            The input state of the six-axis sensor is obtained from the actually attached Joy-Con.
            </summary>
            <param name="activationMode">The mode to set for recognizing the handheld style of operation.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetHandheldActivationMode">
            <summary>
            Gets the mode for recognizing the handheld style of operation.
            Gets the currently set mode for recognizing the handheld style of operation.
            </summary>
            <returns>Returns the currently set mode for recognizing the handheld style of operation.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.op_Implicit(Rewired.Platforms.Switch.SwitchInput.Npad)~Rewired.Platforms.Switch.NpadId">
            <summary>
            Conversion from Npad to NpadId.
            </summary>
            <param name="npad">The Npad.</param>
            <returns>NpadId of the Npad</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.op_Implicit(Rewired.Platforms.Switch.NpadId)~Rewired.Platforms.Switch.SwitchInput.Npad">
            <summary>
            Conversion from npadId to Npad
            </summary>
            <param name="npadId">The npadId</param>
            <returns>Npad with the specified npadId</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetStyleSet">
            <summary>
            Gets the Npad operation mode.
            The Npad supports several different operation modes.
            Use this function to get the current operation mode of the Npad with the specified Npad ID. 
            The supported operation modes are determined by the operation modes set using the <see cref="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetSupportedStyleSet(Rewired.Platforms.Switch.NpadStyle)">SetSupportedStyleSet()</see>
            function and the type of controller that is connected.
            This function returns <see cref="F:Rewired.Platforms.Switch.NpadStyle.None">NpadStyle.None</see> when there is no controller with the specified Npad ID connected.
            </summary>
            <returns>Returns the Npad operation mode.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.Disconnect">
            <summary>
            Disconnects the Npad.
            This function can be used on Npads with Npad IDs from <see cref="F:Rewired.Platforms.Switch.NpadId.No1">NpadId.No1</see> to <see cref="F:Rewired.Platforms.Switch.NpadId.No8">NpadId.No8</see>.
            This function will not do anything if called on other Npads.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetPlayerLedPattern">
            <summary>
            Gets the pattern of lit Npad player LEDs.
            The pattern of lit LEDs is expressed using the lower 4 bits of Bit8. The lowest-order bit represents the lit state of the player LED furthest to the left.
            Player LEDs can be obtained for <see cref="F:Rewired.Platforms.Switch.NpadId.No1">NpadId.No1</see> through <see cref="F:Rewired.Platforms.Switch.NpadId.No8">NpadId.No8</see>.
            This function will return <see cref="F:Rewired.Platforms.Switch.GamepadPlayerLight.None">GamepadPlayerLight.None</see> if it is called on other Npads.
            </summary>
            <returns>Returns the player led pattern.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetJoyConAssignmentMode">
            <summary>
            Gets the Joy-Con assignment mode.
            There are two assignment modes. In dual mode, the pair of Joy-Con controllers is assigned to one Npad.
            In single mode, each controller for the Joy-Con is assigned individually to an Npad.
            Dual controller assignment mode (<see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConDual">NpadStyle.JoyConDual</see>):
            A single Npad is assigned the set of left and right Joy-Con.
            Player LEDs flash on both the right and left Joy-Con controllers, using the same controller number.
            In dual assignment mode, the <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConDual">NpadStyle.JoyConDual</see> style of operation is enabled.
            Even if only one of the Joy-Con pair is attached, the input is taken to be NpadStyle.JoyConDual input.
            Single controller assignment mode: (<see cref="F:Rewired.Platforms.Switch.JoyConAssignmentMode.Single">JoyConAssignmentMode.Single</see>):
            A single Npad is assigned either Joy-Con (R) or Joy-Con (L). 
            Different player LEDs flash on both the right and left Joy-Con controllers, for different controller numbers. 
            In single assignment mode, either the <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConRight">NpadStyle.JoyConRight</see> or the <see cref="F:Rewired.Platforms.Switch.NpadStyle.JoyConLeft">NpadStyle.JoyConLeft</see> style of operation is enabled.
            The valid <see cref="T:Rewired.Platforms.Switch.NpadStyle">NpadStyle</see> varies, depending on the type of Joy-Con that is connected.
            </summary>
            <returns>Returns the current assignment mode.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetJoyConAssignmentModeToSingle">
            <summary>
            Changes the Npad's Joy-Con assignment mode to "Single.".
            There are two assignment modes. In dual mode, the pair of Joy-Con controllers is assigned to one Npad. 
            In single mode, each controller for the Joy-Con is assigned individually to an Npad.
            This function assigns a single connected Joy-Con to the specified Npad. 
            Joy-Con (R) and Joy-Con (L) take different NpadId, and the left and right Joy-Con take different player numbers.
            To change the assignment mode, specify one NpadId. 
            If a Joy-Con pair is already connected to one NpadId, the Joy-Con (R) is disconnected from the Npad and reconnected to a different Npad to which no Joy-Con is connected.
            If only one Joy-Con was connected in the first place, the mode is simply changed to single assignment mode.
            The Npad assignment mode can be changed externally by a system feature. Use the <see cref="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetJoyConAssignmentMode">GetJoyConAssignmentMode()</see> function to get the current assignment mode.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetJoyConAssignmentModeToSingle(Rewired.Platforms.Switch.JoyConType)">
            <summary>
            Changes the Npad's Joy-Con assignment mode to "Single.".
            There are two assignment modes. In dual mode, the pair of Joy-Con controllers is assigned to one Npad. 
            In single mode, each controller for the Joy-Con is assigned individually to an Npad.
            This function assigns a single connected Joy-Con to the specified Npad.
            Joy-Con (R) and Joy-Con (L) take different Npad IDs, and the left and right Joy-Con take different player numbers.
            To change the assignment mode, specify one Npad ID. With this function, if a Joy-Con pair is already connected to the Npad ID, you can use NpadJoyDeviceType to specify which of the two to keep connected. 
            The Joy-Con controller that is not specified is disconnected from the Npad and reconnected to a different Npad to which no Joy-Con is connected.
            If only one Joy-Con was connected in the first place, the value specified for type is ignored and the mode is simply changed to single assignment mode.
            The Npad assignment mode can be changed externally by a system feature. Use the <see cref="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetJoyConAssignmentMode">GetJoyConAssignmentMode()</see> function to get the current assignment mode.
            </summary>
            <param name="joyConType">If the pair of controllers is connected, specify whether to keep Joy-Con (R) or Joy-Con (L).</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SetJoyConAssignmentModeToDual">
            <summary>
            Changes the Joy-Con assignment mode for the Npad to dual mode.
            There are two assignment modes. In dual mode, the pair of Joy-Con controllers is assigned to one Npad. 
            In single mode, each controller for the Joy-Con is assigned individually to an Npad.
            This function sets the Joy-Con assignment mode to dual mode for the specified Npad.
            Joy-Con (R) and Joy-Con (L) take different Npad IDs, and the left and right Joy-Con take different player numbers.
            To change the assignment mode, specify one Npad ID. 
            If the assignment mode is set to dual, when a Joy-Con is newly connected it is assigned as the pair of controllers.
            The Npad assignment mode can be changed externally by a system feature. Use the <see cref="M:Rewired.Platforms.Switch.SwitchInput.Npad.GetJoyConAssignmentMode">GetJoyConAssignmentMode()</see> function to get the current assignment mode.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.MergeSingleJoyCons(Rewired.Platforms.Switch.NpadId)">
            <summary>
            Merges two Npads with single-mode assignments into one Npad with a dual-mode assignment.
            To change the assignment mode using this function, specify the Npad ID for the two Npad in advance.
            Merges two Npads with single-mode assignments into one Npad with a dual-mode assignment.
            The two Npads must be connected respectively to the left and right Joy-Con controllers.
            The change fails if a Joy-Con controller pair is connected to one of the two Npads, or if a Joy-Con (R) is connected to both Npads.
            When the function makes the change, the mode for <see cref="T:Rewired.Platforms.Switch.NpadId">NpadId</see> changes to dual assignment mode.
            </summary>
            <param name="npadId2">NpadId of the second Joy-Con.</param>
            <returns>Success / failure</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.SwapAssignment(Rewired.Platforms.Switch.NpadId)">
            <summary>
            Swaps the npadIds of two controllers.
            This function will run even if the physical controllers are not mapped.
            If a controller is mapped to id1 but nothing is mapped to id2, the controller set to id1 will be mapped to id2.
            </summary>
            <param name="npadId2">The second Npad ID.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.IsConnected">
            <summary>
            The connection state of the Npad.
            </summary>
            <returns>The Npad connection state.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.IsConnected(Rewired.Platforms.Switch.JoyConType)">
            <summary>
            The connection state of a specific Joy-Con in a Dual Joy-Con controller.
            </summary>
            <param name="joyConType">The Left or Right Joy-Con.</param>
            <returns>The Joy-Con connection state.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.IsWired">
            <summary>
            Indicates whether the Npad is connected to a supported device via a cable. 
            </summary>
            <returns>The Npad wired state.</returns>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchInput.Npad.IsWired(Rewired.Platforms.Switch.JoyConType)">
            <summary>
            Indicates whether a specific Joy-Con in a Dual Joy-Con controller is connected to a supported device via a cable. 
            </summary>
            <param name="joyConType">The Left or Right Joy-Con.</param>
            <returns>The Joy-Con wired state.</returns>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Npad.rewiredPlayerId">
            <summary>
            The Rewired Player Id assigned to this Npad id.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.SwitchInput.Npad.isAllowed">
            <summary>
            Determines whether this Npad id is allowed to be used by the system.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.ControllerAppletOptions">
            <summary>
            Options to pass to the Nintendo Switch controller applet.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ControllerAppletOptions.#ctor">
            <summary>
            Creates an instance of this class with the default values.
            The default values are:
            playerCountMin = 0;
            playerCountMax = 4;
            keepConnections = true;
            collapseIds = true;
            allowJoyDual = true;
            singlePlayerMode = false;
            showColors = false;
            showControllerLabels = false;
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ControllerAppletOptions.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.playerCountMin">
            <summary>
            The minimum number of players that will get wireless controller connections.
            Ignored in single-player mode.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.playerCountMax">
            <summary>
            The maximum number of players that will get wireless controller connections.
            Ignored in single-player mode.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.keepConnections">
            <summary>
            Specifies whether to maintain the connection of controllers that are already connected.
            Specify false to disconnect all controllers.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.collapseIds">
            <summary>
            Specifies whether to collapse the controller numbers when the controller applet is ended.
            When false is specified, there may be gaps in controller numbers when the controller applet is ended.
            Ignored in single-player mode.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.allowDualJoyCon">
            <summary>
            Specifies whether to permit actions when both controllers are being held in a dual-controller grip.
            When false is specified, actions cannot be made when both controllers are being held in a dual-controller grip.
            This is designed for times like during local communication when you want to prohibit the dual-controller grip.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.singlePlayerMode">
            <summary>
            Specifies whether to start the controller applet in single-player mode.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.showColors">
            <summary>
            Specifies whether to use colors to identify the individual controller numbers shown in the controller applet UI.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.showLabels">
            <summary>
            Specifies whether to use explanatory text for the individual controller numbers shown in the controller support UI.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.players">
            <summary>
            Options for each Npad.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.ControllerAppletOptions.PlayerOptions">
            <summary>
            Options for each Npad.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.ControllerAppletOptions.PlayerOptions.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.PlayerOptions.color">
            <summary>
            Specifies the colors to use to identify the individual controller numbers shown in the controller applet UI.
            If showColors is false, the values specified here will not be applied.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.Switch.ControllerAppletOptions.PlayerOptions.label">
            <summary>
            The text to use for the individual controller number shown in the controller applet UI.
            You can specify up to 32 characters.
            If showLabels is false, the values specified here will not be applied.
            Check how the text actually displays to make sure it is not too long and otherwise displays appropriately.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.ControllerAppletResult">
            <summary>
            A result from the Nintendo Switch controller applet.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.ControllerAppletResult.playerCount">
            <summary>
            The number of players determined by the controller applet.
            Returns 0 if controller support is canceled. Ignored in single-player mode.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.ControllerAppletResult.selectedId">
            <summary>
            The NpadIdType selected in single-player mode.
            If the controller applet is canceled, returns the NpadId with which it was canceled.
            This is invalid in anything other than single-player mode.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Switch.SwitchVibration">
            <summary>
            Vibration motor state.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchVibration.amplitudeLow">
            <summary>
            The low bandwidth amplitude [0.0 - 1.0]
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchVibration.frequencyLow">
            <summary>
            The low bandwidth frequency in Hertz.
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchVibration.amplitudeHigh">
            <summary>
            The high bandwidth amplitude [0.0 - 1.0]
            </summary>
        </member>
        <member name="F:Rewired.Platforms.Switch.SwitchVibration.frequencyHigh">
            <summary>
            The high bandwidth frequency in Hertz.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchVibration.Create">
            <summary>
            Creates a new vibration with the default settings..
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchVibration.Create(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new vibration with the specified settings.
            </summary>
            <param name="amplitudeLow">The low band amplitude.</param>
            <param name="frequencyLow">The low band frequency.</param>
            <param name="amplitudeHigh">The high band amplitude.</param>
            <param name="frequencyHigh">The high band frequency.</param>
        </member>
        <member name="M:Rewired.Platforms.Switch.SwitchVibration.Create(System.Single,System.Single)">
            <summary>
            Creates a new vibration with the specified amplitudes and the default frequencies.
            </summary>
            <param name="amplitudeLow">The low band amplitude.</param>
            <param name="amplitudeHigh">The high band amplitude.</param>
        </member>
        <member name="T:Rewired.Platforms.Switch.VibrationManager">
            <summary>
            Updates vibration on a separate thread at 200 Hz.
            Vibration used to be updated by Controller through Controller.Extension, but
            the threaded version required a manager to update the motors on a native callback.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.Switch.VibrationMotor.T_ThreadUpdate(System.Single)">
            <summary>
            Warning: This is called from a different thread.
            </summary>
        </member>
    </members>
</doc>
